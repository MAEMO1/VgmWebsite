name: VGM Website CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - frontend-only

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Build and Test
  frontend:
    runs-on: ubuntu-latest
    outputs:
      frontend-ready: ${{ steps.build.outputs.success }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: cd frontend && npm ci
      
      - name: Run linting
        run: cd frontend && npm run lint
      
      - name: Run type checking
        run: cd frontend && npm run type-check
      
      - name: Build frontend
        id: build
        run: |
          cd frontend
          npm run build
          echo "success=true" >> $GITHUB_OUTPUT
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/
          retention-days: 7

  # Backend Build and Test
  backend:
    runs-on: ubuntu-latest
    outputs:
      backend-ready: ${{ steps.test.outputs.success }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8
      
      - name: Run linting
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Run tests
        id: test
        run: |
          python -m pytest tests/ --cov=. --cov-report=term-missing --cov-fail-under=60
          echo "success=true" >> $GITHUB_OUTPUT
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: htmlcov/
          retention-days: 7

  # Deploy Frontend to Vercel
  deploy-frontend:
    needs: [frontend]
    if: needs.frontend.outputs.frontend-ready == 'true'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Deploy to Vercel
        run: |
          cd frontend
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

  # Deploy Backend to Railway
  deploy-backend:
    needs: [backend]
    if: needs.backend.outputs.backend-ready == 'true'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy to Railway
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway up --service backend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  # Health Check
  health-check:
    needs: [deploy-frontend, deploy-backend]
    if: always() && (needs.deploy-frontend.result == 'success' || needs.deploy-backend.result == 'success')
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Frontend Health
        if: needs.deploy-frontend.result == 'success'
        run: |
          curl -f https://frontend-maemo.vercel.app || exit 1
          echo "Frontend health check passed"
      
      - name: Check Backend Health
        if: needs.deploy-backend.result == 'success'
        run: |
          curl -f https://vgm-website-production.up.railway.app/health || exit 1
          echo "Backend health check passed"
      
      - name: Update Monitoring Dashboard
        run: |
          echo "Deployment completed successfully"
          echo "Frontend: ${{ needs.deploy-frontend.result }}"
          echo "Backend: ${{ needs.deploy-backend.result }}"

  # Notify on Failure
  notify-failure:
    needs: [frontend, backend, deploy-frontend, deploy-backend]
    if: failure()
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify Deployment Failure
        run: |
          echo "Deployment failed!"
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Backend: ${{ needs.backend.result }}"
          echo "Deploy Frontend: ${{ needs.deploy-frontend.result }}"
          echo "Deploy Backend: ${{ needs.deploy-backend.result }}"