/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user */
        post: operations["loginUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register new user */
        post: operations["registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user information */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mosques": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of mosques */
        get: operations["getMosques"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mosques/{mosque_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mosque details */
        get: operations["getMosque"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of events */
        get: operations["getEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get event details */
        get: operations["getEvent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ramadan/iftar-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of iftar events */
        get: operations["getIftarEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/donations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of donations */
        get: operations["getDonations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/news": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of news articles */
        get: operations["getNews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/news/{news_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get news article details */
        get: operations["getNewsArticle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description Error message */
            error: string;
            /** @description Error code */
            code?: number;
        };
        Success: {
            /** @description Success message */
            message: string;
            /** @description Response data */
            data?: Record<string, never>;
        };
        Login: {
            /**
             * Format: email
             * @description User email
             */
            email: string;
            /** @description User password */
            password: string;
            /** @description Remember user */
            remember?: boolean;
        };
        Register: {
            /**
             * Format: email
             * @description User email
             */
            email: string;
            /** @description User password */
            password: string;
            /** @description First name */
            first_name: string;
            /** @description Last name */
            last_name: string;
            /** @description Phone number */
            phone?: string;
            /** @description User role */
            role?: string;
            /** @description Mosque ID */
            mosque_id?: number;
        };
        User: {
            /** @description User ID */
            id?: number;
            /**
             * Format: email
             * @description User email
             */
            email?: string;
            /** @description First name */
            first_name?: string;
            /** @description Last name */
            last_name?: string;
            /** @description Phone number */
            phone?: string;
            /** @description User role */
            role?: string;
            /** @description Mosque ID */
            mosque_id?: number;
            /** @description Is active */
            is_active?: boolean;
            /** @description Email verified */
            email_verified?: boolean;
            /**
             * Format: date-time
             * @description Created at
             */
            created_at?: string;
        };
        Mosque: {
            /** @description Mosque ID */
            id?: number;
            /** @description Mosque name */
            name?: string;
            /** @description Mosque address */
            address?: string;
            /** @description Phone number */
            phone?: string;
            /**
             * Format: email
             * @description Email address
             */
            email?: string;
            /** @description Website URL */
            website?: string;
            /** @description Capacity */
            capacity?: number;
            /** @description Established year */
            established_year?: number;
            /** @description Imam name */
            imam_name?: string;
            /** @description Description */
            description?: string;
            /**
             * Format: float
             * @description Latitude
             */
            latitude?: number;
            /**
             * Format: float
             * @description Longitude
             */
            longitude?: number;
            /** @description Is active */
            is_active?: boolean;
            /**
             * Format: date-time
             * @description Created at
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updated_at?: string;
        };
        Event: {
            /** @description Event ID */
            id?: number;
            /** @description Mosque ID */
            mosque_id?: number;
            /** @description Event title */
            title?: string;
            /** @description Event description */
            description?: string;
            /**
             * Format: date
             * @description Event date
             */
            event_date?: string;
            /** @description Event time */
            event_time?: string;
            /** @description Event type */
            event_type?: string;
            /** @description Is recurring */
            is_recurring?: boolean;
            /** @description Recurring pattern */
            recurring_pattern?: string;
            /** @description Max attendees */
            max_attendees?: number;
            /** @description Current attendees */
            current_attendees?: number;
            /** @description Is active */
            is_active?: boolean;
            /** @description Created by user ID */
            created_by?: number;
            /**
             * Format: date-time
             * @description Created at
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updated_at?: string;
        };
        IftarEvent: {
            /** @description Iftar event ID */
            id?: number;
            /** @description Mosque ID */
            mosque_id?: number;
            /**
             * Format: date
             * @description Event date
             */
            date?: string;
            /** @description Start time */
            start_time?: string;
            /** @description End time */
            end_time?: string;
            /** @description Location */
            location?: string;
            /** @description Is family friendly */
            is_family_friendly?: boolean;
            /** @description Capacity */
            capacity?: number;
            /**
             * Format: date-time
             * @description Created at
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updated_at?: string;
        };
        Donation: {
            /** @description Donation ID */
            id?: number;
            /** @description Mosque ID */
            mosque_id?: number;
            /** @description Campaign ID */
            campaign_id?: number;
            /** @description Donor name */
            donor_name?: string;
            /**
             * Format: email
             * @description Donor email
             */
            donor_email?: string;
            /**
             * Format: float
             * @description Donation amount
             */
            amount?: number;
            /** @description Payment method */
            payment_method?: string;
            /** @description Payment status */
            payment_status?: string;
            /** @description Transaction ID */
            transaction_id?: string;
            /** @description Is anonymous */
            is_anonymous?: boolean;
            /**
             * Format: date-time
             * @description Created at
             */
            created_at?: string;
        };
        News: {
            /** @description News ID */
            id?: number;
            /** @description News title */
            title?: string;
            /** @description News content */
            content?: string;
            /** @description News excerpt */
            excerpt?: string;
            /** @description Author ID */
            author_id?: number;
            /** @description News category */
            category?: string;
            /** @description Featured image URL */
            featured_image?: string;
            /** @description Is published */
            is_published?: boolean;
            /**
             * Format: date-time
             * @description Published at
             */
            published_at?: string;
            /**
             * Format: date-time
             * @description Created at
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updated_at?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    loginUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Login"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Success"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    registerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Register"];
            };
        };
        responses: {
            /** @description User registered successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Success"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getMosques: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of mosques */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Mosque"][];
                };
            };
        };
    };
    getMosque: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mosque_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Mosque details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Mosque"];
                };
            };
            /** @description Mosque not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getEvents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
        };
    };
    getEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Event details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Event not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getIftarEvents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of iftar events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IftarEvent"][];
                };
            };
        };
    };
    getDonations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of donations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Donation"][];
                };
            };
        };
    };
    getNews: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of news articles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["News"][];
                };
            };
        };
    };
    getNewsArticle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                news_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description News article details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["News"];
                };
            };
            /** @description News article not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
